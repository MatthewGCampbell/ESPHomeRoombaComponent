esphome:
  name: test
  platform: ESP8266
  board: huzzah
  includes:
    - /config/esphome/ESPRoombaHomeComponent.h
  libraries:
    - Roomba=https://github.com/Apocrathia/Roomba
  platformio_options:
   build_flags: -D HAVE_HWSERIAL0

substitutions:
  name: "roomba"
  # state topic, command topic, BRC pin, polling interval
  init: 'RoombaComponent::instance("roomba/state", "roomba/command", 2, 1000);'

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
# Enable fallback hotspot (captive portal) in case wifi connection fails
#  ap:
#    ssid: "roomba Fallback Hotspot"
#    password: !secret fallback_password

mqtt:
  broker: !secret mqtt_broker
  discovery: true
  username: !secret mqtt_username
  password: !secret mqtt_password

logger:
  baud_rate: 0
  level: info

ota:

# Home Assistant API must be enabled when you are using MQTT!
# api:

# Enable Web server.
# web_server:
#  port: 80

custom_component:
  - lambda: |-
      auto r = ${init}
      return {r};

sensor:
 - platform: custom
   lambda: |-
      auto r = ${init}
      return {r->distanceSensor, r->voltageSensor, r->currentSensor, r->chargeSensor, r->capacitySensor};

   sensors:
     - name: "${name} distance"
       unit_of_measurement: "mm"
       accuracy_decimals: 0
     - name: "${name} voltage"
       unit_of_measurement: "mV"
       accuracy_decimals: 0
     - name: "${name} current"
       unit_of_measurement: "mA"
       accuracy_decimals: 0
     - name: "${name} charge"
       unit_of_measurement: "mAh"
       accuracy_decimals: 0
     - name: "${name} capacity"
       unit_of_measurement: "mAh"
       accuracy_decimals: 0

binary_sensor: 
  - platform: status
    name: "${name} Status"

  - platform: custom
    lambda: |-
       auto r = ${init}
       return {r->chargingBinarySensor, r->dockedBinarySensor, r->cleaningBinarySensor};

    binary_sensors:
      - name: "${name} charging"
      - name: "${name} docked"
      - name: "${name} cleaning"